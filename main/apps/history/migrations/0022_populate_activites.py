# Generated by Django 3.2.8 on 2023-01-16 01:39
import json
import logging

from auditlog.models import LogEntry
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

from main.apps.account.models import User, Account
from main.apps.history.models.account_management import UserActivity
from main.apps.billing.models.payment import Payment

logger = logging.getLogger(__name__)



CREATE = 0
UPDATE = 1
DELETE = 2
def populate_account_activities(apps, schema_editor):
    for entry in LogEntry.objects.get_for_model(Account):
        if not entry.actor:
            continue
        if not entry.actor.company:
            continue
        try:
            if entry.action == DELETE:
                # We currently dont record any delete related actions.
                continue
            if entry.action == CREATE:
                logger.debug(f"Creating AccountCreated activity for {entry.object_repr}")
                UserActivity.objects.create(
                    log_entry=entry,
                    activity_type=UserActivity.ActivityType.AccountCreated)
        except ObjectDoesNotExist as e:
            logger.warning(f"Could not find account with id {entry.object_repr} for log entry {entry.id}: {e}")

def populate_payment_activities(apps, schema_editor):
    for entry in LogEntry.objects.get_for_model(Payment):
        if not entry.actor:
            continue
        if not entry.actor.company:
            continue
        try:
            if entry.action == DELETE:
                # We currently dont record any delete related actions.
                continue
            changes = json.loads(entry.changes)
            if entry.action == CREATE:
                logger.debug(f"Creating PaymentCreated activity for {entry.object_repr}")
                UserActivity.objects.create(
                    log_entry=entry,
                    activity_type=UserActivity.ActivityType.PaymentCreated)
            elif entry.action == UPDATE:
                logger.debug(f"Creating PaymentUpdated activity for {entry.object_repr}")
                if changes.get("payment_status"):
                    UserActivity.objects.create(
                        log_entry=entry,
                        activity_type=UserActivity.ActivityType.PaymentChanged)
        except ObjectDoesNotExist as e:
            logger.warning(f"Could not find object for log entry {entry.id}: {e}")


def populate_user_activities(apps, schema_editor):
    for entry in LogEntry.objects.get_for_model(User):
        if not entry.actor:
            continue
        if not entry.actor.company:
            continue
        try:
            if entry.action == DELETE:
                # We currently dont record any delete related actions.
                continue
            changes = json.loads(entry.changes)
            if entry.action == CREATE:
                logger.debug(f"Creating UserAdded activity for {entry.object_repr}")
                UserActivity.objects.create(
                    log_entry=entry,
                    activity_type=UserActivity.ActivityType.UserAdded)
            elif entry.action == UPDATE:
                if changes.get("password"):
                    logger.debug(f"Creating PasswordReset activity for {entry.object_repr}")
                    UserActivity.objects.create(
                        log_entry=entry,
                        activity_type=UserActivity.ActivityType.PasswordReset)
                elif changes.get("email"):
                    logger.debug(f"Creating EmailChanged activity for {entry.object_repr}")
                    UserActivity.objects.create(
                        log_entry=entry,
                        activity_type=UserActivity.ActivityType.EmailChanged)
        except ObjectDoesNotExist as e:
            logger.warning(f"Could not find object for log entry {entry.id}: {e}")

class Migration(migrations.Migration):

    dependencies = [
        ('history', '0021_remove_useractivity_company'),
    ]

    operations = [
        migrations.RunPython(populate_account_activities),
        migrations.RunPython(populate_payment_activities),
        migrations.RunPython(populate_user_activities),
    ]
