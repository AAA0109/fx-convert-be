# Generated by Django 4.2.10 on 2024-03-11 18:51

from django.db import migrations, IntegrityError
from django.conf import settings

import logging

logger = logging.getLogger(__name__)

def update_brokers(app, schema_editor):

    broker_data = [

        {
            'name': 'Nium',
            'broker_provider': 'NIUM',
            'execution_method': 'synchronous',
            'supported_instruments': 'spot,rtp',
            'minimum_rfq_expiry': 60,
            'maximum_rfq_expiry': 86400,
            'supported_execution_types': 'rfq',
            'api_types': 'rest',
            'api_configs': {
                'NIUM_API_BASE': settings.NIUM_API_BASE,
                'NIUM_CLIENT_ID': settings.NIUM_CLIENT_ID,
                'NIUM_API_KEY': settings.NIUM_API_KEY
            },
            'funding_models': 'prefunded',
            'domicile': 'IN',
            'contact_name': 'Michael Podrid',
            'contact_email': 'michael.podrid@nium.com',
        },

        {
            'name': 'Monex USA',
            'broker_provider': 'MONEX',
            'execution_method': 'synchronous',
            'supported_instruments': 'spot,forward,window_forward,swap,option',
            'minimum_rfq_expiry': 60,
            'maximum_rfq_expiry': 86400,
            'supported_execution_types': 'rfq,limit',
            'api_types': 'rest',
            'api_configs': {},
            'funding_models': 'postfunded,postmargined',
            'domicile': 'US',
            'contact_name': 'Andrew Hazlett',
            'contact_email': 'ahazlett@monexusa.com',
        },


        {
            'name': 'Corpay',
            'broker_provider': 'CORPAY',
            'execution_method': 'synchronous',
            'supported_instruments': 'spot,forward,option,window_forward,ndf',
            'minimum_rfq_expiry': 20,
            'maximum_rfq_expiry': 20,
            'supported_execution_types': 'rfq,quote_lock,limit,voice',
            'api_types': 'rest',
            'api_configs': {
                'CORPAY_PARTNER_LEVEL_USER_ID': settings.CORPAY_PARTNER_LEVEL_USER_ID,
                'CORPAY_PARTNER_LEVEL_SIGNATURE': settings.CORPAY_PARTNER_LEVEL_SIGNATURE,
                'CORPAY_CLIENT_LEVEL_CODE': settings.CORPAY_CLIENT_LEVEL_CODE,
                'CORPAY_CLIENT_LEVEL_SIGNATURE': settings.CORPAY_CLIENT_LEVEL_SIGNATURE,
                'CORPAY_JWT_AUDIENCE': settings.CORPAY_JWT_AUDIENCE,
                'CORPAY_API_URL': settings.CORPAY_API_URL,
            },
            'funding_models': 'postfunded,postmargined',
            'domicile': 'US',
            'contact_name': 'Bill Taibl',
            'contact_email': 'william.taibl@corpay.com',
        },


        {
            'name': 'Interactive Brokers',
            'broker_provider': 'IBKR',
            'execution_method': 'asynchronous',
            'supported_instruments': 'future,base_future,continuous_future,cash_equity,continuous_spot',
            'minimum_rfq_expiry': 0,
            'maximum_rfq_expiry': 0,
            'supported_execution_types': 'limit,market,twap,vwap',
            'api_types': 'fix,python_sdk_async',
            'api_configs': None,
            'funding_models': 'premargined',
            'domicile': 'US',
        },

        {
            'name': 'Corpay Mass Payments',
            'broker_provider': 'CORPAY_MP',
            'execution_method': 'synchronous',
            'supported_instruments': 'spot',
            'minimum_rfq_expiry': 20,
            'maximum_rfq_expiry': 20,
            'supported_execution_types': 'rfq',
            'api_types': 'rest',
            'api_configs': {
                'CORPAY_PARTNER_LEVEL_USER_ID': settings.CORPAY_PARTNER_LEVEL_USER_ID,
                'CORPAY_PARTNER_LEVEL_SIGNATURE': settings.CORPAY_PARTNER_LEVEL_SIGNATURE,
                'CORPAY_CLIENT_LEVEL_CODE': settings.CORPAY_CLIENT_LEVEL_CODE,
                'CORPAY_CLIENT_LEVEL_SIGNATURE': settings.CORPAY_CLIENT_LEVEL_SIGNATURE,
                'CORPAY_JWT_AUDIENCE': settings.CORPAY_JWT_AUDIENCE,
                'CORPAY_API_URL': settings.CORPAY_API_URL,
            },
            'funding_models': 'postfunded,postmargined',
            'domicile': 'US',
            'contact_name': 'Bill Taibl',
            'contact_email': 'william.taibl@corpay.com',
        },

        {
            'name': 'Verto Fx',
            'broker_provider': 'VERTO',
            'execution_method': 'synchronous',
            'supported_instruments': 'spot',
            'minimum_rfq_expiry': 20,
            'maximum_rfq_expiry': 20,
            'supported_execution_types': 'rfq',
            'api_types': 'rest',
            'api_configs': {
                'VERTO_API_BASE': settings.VERTO_API_BASE,
                'VERTO_CLIENT_ID': settings.VERTO_CLIENT_ID,
                'VERTO_API_KEY': settings.VERTO_API_KEY
            },
            'funding_models': 'postfunded',
            'domicile': 'UK',
            'contact_name': 'Milo Simpson-Pedler',
            'contact_email': 'milo@vertofx.com',
        },

        {
            'name': 'AZA Finance',
            'broker_provider': 'AZA',
            'execution_method': 'manual',
            'supported_instruments': 'spot',
            'minimum_rfq_expiry': 0,
            'maximum_rfq_expiry': 0,
            'supported_execution_types': 'rfq,voice',
            'api_types': 'rest',
            'api_configs': {},
            'funding_models': 'postfunded',
            'domicile': 'UK',
            'contact_name': 'Luis Cambronero Perez',
            'contact_email': 'luis@azafinance.com',
        },

    ]

    # ================

    Broker = app.get_model('broker', 'Broker')
    for data in broker_data:
        try:
            broker, created = Broker.objects.get_or_create(name=data['name'])
            for k, v in data.items():
                if hasattr(broker, k): setattr(broker, k, v)
            broker.save()
        except IntegrityError:
            continue


class Migration(migrations.Migration):
    dependencies = [
        ('broker', '0007_broker_contact_email_broker_contact_name_and_more'),
    ]

    operations = [
        migrations.RunPython(update_brokers),
    ]
