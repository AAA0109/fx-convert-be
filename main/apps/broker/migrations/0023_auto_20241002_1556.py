# Generated by Django 4.2.15 on 2024-10-02 15:56

import json
from django.db import migrations


def add_same_ccy_broker_instruments(apps, schema_editor):
    Instrument = apps.get_model('marketdata', 'Instrument')
    Broker = apps.get_model('broker', 'Broker')
    BrokerInstrument = apps.get_model(
        'broker', 'BrokerInstrument')
    ccy_list = [
        'USD',
        'EUR',
        'CAD',
        'GBP',
        'MXN'
    ]
    broker_providers = [
        'MONEX',
        'CORPAY'
    ]

    for ccy in ccy_list:
        fxrate_instrument_name = f'{ccy}{ccy}'
        rtp_instrument_name = f'{ccy}{ccy}-RTP'
        spot_instrument_name = f'{ccy}{ccy}-SPOT'
        reference = {
            "TENOR": "SPOT",
            "MARKET": "USDUSD",
            "TENORS": {
                "1M": False,
                "1W": False,
                "1Y": False,
                "2D": False,
                "2M": False,
                "2W": False,
                "2Y": False,
                "3D": False,
                "3M": False,
                "3W": False,
                "4M": False,
                "5M": False,
                "6M": False,
                "7M": False,
                "8M": False,
                "9M": False,
                "ON": False,
                "SN": False,
                "SW": False,
                "TN": False,
                "EOM1": False,
                "EOM2": False,
                "EOM3": False,
                "EOM4": False,
                "EOM5": False,
                "EOM6": False,
                "IMM1": False,
                "IMM2": False,
                "IMM3": False,
                "IMM4": False,
                "SPOT": False
            },
            "QT_SPEC": 4,
            "BASE_CCY": ccy,
            "CCY_TYPE": "Spot",
            "CNTR_CCY": ccy,
            "TIMEZONE": "America/New_York",
            "VOL_TYPE": "log_rtn",
            "TICK_TYPE": "mid",
            "INSTR_TYPE": "FX",
            "DESCRIPTION": ccy,
            "CALENDAR_CODE": "STANDARD",
            "DELIVERY_TYPE": "Deliverable",
            "SETTLEMENT_DAYS": 2,
            "TERM_STRUCTURE_FIT": None
        }
        symbology = {
            "BBG": {
                "FIGI": None,
                "SYMBOL": None,
                "BBG_SRC": None,
                "BBG_BASE": None,
                "BBG_YELLOWKEY": None,
                "CALENDAR_CODES": ["FD"]
            },
            "IBKR": {
                "IB_CCY": None,
                "IB_DESC": None,
                "IB_EXCH": None,
                "IB_MULT": None,
                "IB_NAME": None,
                "IB_TYPE": None,
                "IB_CONID": None,
                "IB_EXCHS": None,
                "IB_LOCSYM": None,
                "IB_SYMBOL": None,
                "IB_MINTICK": None,
                "IB_PRICEMAG": None,
                "IB_TIMEZONE": None
            },
            "FINCAL": {
                "CEN_CODE": "DCCY",
                "ALT_CEN_CODE": None,
                "EXEC_CEN_CODE": "DCCY",
                "HOL_CAL_CODES": ["NYB"],
                "WEEKEND_CEN_CODE": None
            },
            "REUTERS": {
                "SYMBOL": None,
                "REUTERS_BASE": None
            }
        }
        fxrate_instrument, created = Instrument.objects.get_or_create(name=fxrate_instrument_name, defaults={
            'instrument_type': 'fxrate',
            'tradable_instrument': False,
            'base_instrument': None,
            'reference': reference,
            'symbology': symbology,
            'multi_leg': False
        })
        rtp_instrument, created = Instrument.objects.get_or_create(name=rtp_instrument_name, defaults={
            'instrument_type': 'rtp',
            'tradable_instrument': True,
            'base_instrument': fxrate_instrument_name,
            'reference': None,
            'symbology': None,
            'multi_leg': False
        })
        spot_instrument, created = Instrument.objects.get_or_create(name=spot_instrument_name, defaults={
            'instrument_type': 'spot',
            'tradable_instrument': True,
            'base_instrument': fxrate_instrument_name,
            'reference': None,
            'symbology': None,
            'multi_leg': False
        })

        for broker_provider in broker_providers:
            broker = Broker.objects.get(broker_provider=broker_provider)
            broker_instrument, created = BrokerInstrument.objects.get_or_create(
                broker=broker,
                instrument=spot_instrument,
                base_ccy=ccy,
                counter_ccy=ccy,
                defaults={
                    "active": True,
                    "buy": True,
                    "sell": True,
                    "buy_wallet": True,
                    "sell_wallet": True,
                    "buy_cost": 0,
                    "buy_cost_unit": 'pct',
                    "sell_cost": 0,
                    "sell_cost_unit": 'pct',
                    "buy_fee": 0,
                    "buy_fee_unit": 'pct',
                    "sell_fee": 0,
                    "sell_fee_unit": 'pct',
                    "funding_models": ['postfunded'],
                    "execution_types": ['voice'],
                    "api_types": ['manual'],
                    "wire_fee": 0.0,
                    "wire_fee_unit": 'usd'
                }
            )


class Migration(migrations.Migration):

    dependencies = [
        ('broker', '0022_auto_20241001_1800'),
    ]

    operations = [
        migrations.RunPython(add_same_ccy_broker_instruments,
                             reverse_code=migrations.RunPython.noop)
    ]
