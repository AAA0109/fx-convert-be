# Generated by Django 4.2.10 on 2024-03-11 18:51

from django.db import migrations, IntegrityError
from django.conf import settings

from main.apps.oems.backend.utils import load_yml, Expand
from main.apps.broker.models.constants import FeeType, BrokerExecutionMethodOptions, ExecutionTypes, ApiTypes, FundingModel
from main.apps.oems.backend.ccy_utils import check_direction

import csv
import logging

logger = logging.getLogger(__name__)

ACTIVE_CCYS = [
    'XAG',
    'XAU',
    'BTC',
    'ETH',
    'EUR',
    'GBP',
    'AUD',
    'NZD',
    'USD',
    'CAD',
    'CHF',
    'NOK',
    'SEK',
    'BRL',
    'MXN',
    'HKD',
    'TRY',
    'ZAR',
    'PLN',
    'HUF',
    'CZK',
    'SGD',
    'CNY',
    'CNH',
    'KRW',
    'INR',
    'RUB',
    'TWD',
    'THB',
    'MYR',
    'ILS',
    'IDR',
    'CLP',
    'COP',
    'PEN',
    'PHP',
    'ARS',
    'JPY',
    'NGN',
    'KES',
    'UGX',
]

def parse_sla( sla ):
    if not sla:
        return None
    try:
        sla = sla.replace('~','').replace('+','')
    except:
        print( sla )
        raise
    if sla == 'SAME DAY':
        return 0
    elif sla == 'TALK TO SALES':
        return None
    else:
        return int(sla.split(' ')[0])

def parse_row( row ):
    for k, v in row.items():
        if v == '':
            row[k] = None
        elif '%' in v:
            row[k] = float(v.replace('%',''))
        else:
            row[k] = v.upper()
            
    return row

def check_yes( row, flds ):
    for fld in flds:
        if row[fld] == 'YES':
            return True
    return False

def max_fee( fee1, fee2 ):
    try:
        if isinstance(fee1, float) and isinstance(fee2, float):
            return max(fee1, fee2)
        elif isinstance(fee1, float):
            return fee1
        elif isinstance(fee2, float):
            return fee2
        else:
            return None
    except:
        return None

def parse_deadline( deadline ):
    if deadline:
        # Extract the time and period parts from the input string
        time_part, period = deadline.split()
        hours, minutes = map(int, time_part.split(':'))
        
        # Convert hour based on AM/PM
        if period == "PM" and hours != 12:
            hours += 12
        elif period == "AM" and hours == 12:
            hours = 0
        
        # Format hours and minutes into two digits each
        return f"{hours:02}:{minutes:02}"

def update_brokers(app, schema_editor):

    instruments_to_add = []

    BrokerInstrument = app.get_model('broker', 'BrokerInstrument')
    Instrument = app.get_model('marketdata','Instrument')
    Broker = app.get_model('broker', 'Broker')

    path = Expand(__file__) + '/PANGEA_CORPAY1.csv'
    dry_run = False

    index = {}

    with open( path ) as f:
        reader = csv.DictReader(f, delimiter=',')
        for row in reader:
            prow = parse_row( row )
            prow['DELIVERY_SLA'] = parse_sla( row['DELIVERY_SLA'] )
            prow['DEADLINE_EST'] = parse_deadline( row['DEADLINE_EST'] )
            index[ row['CURRENCY'] ] = prow

    # ============================

    corpay = Broker.objects.get(name='Corpay')
    corpay_mp = Broker.objects.get(name='Corpay Mass Payments')

    populated = set()

    for ccy, row in index.items():

        try:
            instrument = Instrument.objects.get(name=ccy)
        except:
            instrument = None
            # print('skipping', ccy)
            continue

        # ==============================
        # this is corpay

        active = (ccy in ACTIVE_CCYS)

        can_buy = False
        can_sell = False

        buy_wallet = sell_wallet = (row['WALLETS'] == 'YES')

        buy_cost = row['CORPAY_COST']
        buy_cost_unit = FeeType.PCT
        sell_cost = row['CORPAY_COST']
        sell_cost_unit = FeeType.PCT

        buy_fee = row['CORPAY_FEE']
        buy_fee_unit = FeeType.PCT
        sell_fee = row['CORPAY_FEE']
        sell_fee_unit = FeeType.PCT

        # should these be scoped
        delivery_sla = row['DELIVERY_SLA']
        cutoff_time = row['DEADLINE_EST']
        funding_models = None
        execution_types = None
        api_types = None
        wire_fee = 30.0 if ccy != 'USD' else 0.0
        wire_fee_unit = FeeType.USD

        bi = BrokerInstrument(
            broker = corpay,
            instrument = instrument,
            active = active,
            buy = can_buy,
            sell = can_sell,
            buy_wallet = buy_wallet,
            sell_wallet = sell_wallet,
            buy_cost = buy_cost,
            buy_cost_unit = buy_cost_unit,
            sell_cost = sell_cost,
            sell_cost_unit = sell_cost_unit,
            buy_fee = buy_fee,
            buy_fee_unit = buy_fee_unit,
            sell_fee = sell_fee,
            sell_fee_unit = sell_fee_unit,
            delivery_sla = delivery_sla,
            cutoff_time = cutoff_time,
            funding_models = funding_models,
            execution_types = execution_types,
            api_types = api_types,
            wire_fee = wire_fee,
            wire_fee_unit = wire_fee_unit,
        )

        instruments_to_add.append(bi)

        # ====================================
        # this is corpay_mp

        if (row['API'] == 'YES'):
            bi = BrokerInstrument(
                broker = corpay_mp,
                instrument = instrument,
                active = active,
                buy = can_buy,
                sell = can_sell,
                buy_wallet = buy_wallet,
                sell_wallet = sell_wallet,
                buy_cost = buy_cost,
                buy_cost_unit = buy_cost_unit,
                sell_cost = sell_cost,
                sell_cost_unit = sell_cost_unit,
                buy_fee = buy_fee,
                buy_fee_unit = buy_fee_unit,
                sell_fee = sell_fee,
                sell_fee_unit = sell_fee_unit,
                delivery_sla = delivery_sla,
                cutoff_time = cutoff_time,
                funding_models = funding_models,
                execution_types = execution_types,
                api_types = api_types,
                wire_fee = wire_fee,
                wire_fee_unit = wire_fee_unit,
            )
            instruments_to_add.append(bi)


        if row['SPOT_LHS'] == 'YES' or row['SPOT_RHS'] == 'YES':

            # add spot stuff

            for cntr in ('USD','EUR','GBP','CAD'):

                if ccy == cntr: continue

                if check_direction( ccy, cntr ):
                    mkt = f'{cntr}{ccy}'
                    base_ccy = cntr
                    counter_ccy = ccy
                    major_first = False
                else:
                    base_ccy = ccy
                    counter_ccy = cntr
                    mkt = f'{ccy}{cntr}'
                    major_first = True

                name = f'{mkt}-SPOT' 

                if name in populated: continue

                try:
                    instrument = Instrument.objects.get(name=name)
                except:
                    instrument = None
                    # print('skipping', name)
                    continue

                populated.add(name)

                if major_first:
                    buy_wallet = (row['WALLETS'] == 'YES')
                    sell_wallet = (index[cntr]['WALLETS'] == 'YES')
                    can_buy = row['SPOT_LHS']=='YES'
                    can_sell = row['SPOT_RHS']=='YES'
                else:
                    sell_wallet = (row['WALLETS'] == 'YES')
                    buy_wallet = (index[cntr]['WALLETS'] == 'YES')
                    can_sell = row['SPOT_LHS']=='YES'
                    can_buy = row['SPOT_RHS']=='YES'

                cost = max_fee(row['CORPAY_COST'], index[cntr]['CORPAY_COST'])
                fee = max_fee(row['CORPAY_FEE'], index[cntr]['CORPAY_FEE'])

                buy_cost = cost
                buy_cost_unit = FeeType.PCT
                sell_cost = cost
                sell_cost_unit = FeeType.PCT

                buy_fee = fee
                buy_fee_unit = FeeType.PCT
                sell_fee = fee
                sell_fee_unit = FeeType.PCT

                cutoff_time = None
                delivery_sla = None
                funding_models = 'postfunded'
                execution_types = 'rfq,voice' if row['API']=='YES' else 'voice'
                api_types = 'rest,manual' if row['API'] == 'YES' else 'manual'
                wire_fee = 0.0
                wire_fee_unit = FeeType.USD

                bi = BrokerInstrument(
                    broker = corpay,
                    instrument = instrument,
                    base_ccy=base_ccy,
                    counter_ccy=counter_ccy,
                    active = True,
                    buy = can_buy,
                    sell = can_sell,
                    buy_wallet = buy_wallet,
                    sell_wallet = sell_wallet,
                    buy_cost = buy_cost,
                    buy_cost_unit = buy_cost_unit,
                    sell_cost = sell_cost,
                    sell_cost_unit = sell_cost_unit,
                    buy_fee = buy_fee,
                    buy_fee_unit = buy_fee_unit,
                    sell_fee = sell_fee,
                    sell_fee_unit = sell_fee_unit,
                    delivery_sla = delivery_sla,
                    cutoff_time = cutoff_time,
                    funding_models = funding_models,
                    execution_types = execution_types,
                    api_types = api_types,
                    wire_fee = wire_fee,
                    wire_fee_unit = wire_fee_unit,
                )
                instruments_to_add.append(bi)

                if row['API'] == 'YES':
                    # add corpay mp instrument
                    bi = BrokerInstrument(
                        broker = corpay_mp,
                        instrument = instrument,
                        base_ccy=base_ccy,
                        counter_ccy=counter_ccy,
                        active = True,
                        buy = can_buy,
                        sell = can_sell,
                        buy_wallet = buy_wallet,
                        sell_wallet = sell_wallet,
                        buy_cost = buy_cost,
                        buy_cost_unit = buy_cost_unit,
                        sell_cost = sell_cost,
                        sell_cost_unit = sell_cost_unit,
                        buy_fee = buy_fee,
                        buy_fee_unit = buy_fee_unit,
                        sell_fee = sell_fee,
                        sell_fee_unit = sell_fee_unit,
                        delivery_sla = delivery_sla,
                        cutoff_time = cutoff_time,
                        funding_models = funding_models,
                        execution_types = execution_types,
                        api_types = api_types,
                        wire_fee = wire_fee,
                        wire_fee_unit = wire_fee_unit,
                    )
                    instruments_to_add.append(bi)

        # { 'DELIVERABLE_LHS': 'YES', 'DELIVERABLE_RHS': 'YES', 'PANGEA_FEE': 0.3}
        if check_yes( row, ['FWD_LHS_CAD','FWD_LHS_EUR','FWD_LHS_GBP','FWD_LHS_USD','FWD_RHS'] ):

            for cntr in ('USD','EUR','GBP','CAD'):

                if cntr == ccy: continue

                if check_direction( ccy, cntr ):
                    mkt = f'{cntr}{ccy}'
                    base_ccy = cntr
                    counter_ccy = ccy
                    major_first = False
                else:
                    base_ccy = ccy
                    counter_ccy = cntr
                    mkt = f'{ccy}{cntr}'
                    major_first = True

                name = f'{mkt}-BROKEN' 

                if name in populated: continue

                try:
                    instrument = Instrument.objects.get(name=name)
                except:
                    instrument = None
                    # print('skipping', name)
                    continue

                populated.add(name)

                if major_first:
                    buy_wallet = (row['WALLETS'] == 'YES')
                    sell_wallet = (index[cntr]['WALLETS'] == 'YES')
                    can_buy = row[f'FWD_LHS_{cntr.upper()}']=='YES'
                    can_sell = row['FWD_RHS']=='YES'
                else:
                    sell_wallet = (row['WALLETS'] == 'YES')
                    buy_wallet = (index[cntr]['WALLETS'] == 'YES')
                    can_sell = row[f'FWD_LHS_{cntr.upper()}']=='YES'
                    can_buy = row['FWD_RHS']=='YES'

                cost = max_fee(row['CORPAY_COST'], index[cntr]['CORPAY_COST'])
                fee = max_fee(row['CORPAY_FEE'], index[cntr]['CORPAY_FEE'])

                buy_cost = cost
                buy_cost_unit = FeeType.PCT
                sell_cost = cost
                sell_cost_unit = FeeType.PCT

                buy_fee = fee
                buy_fee_unit = FeeType.PCT
                sell_fee = fee
                sell_fee_unit = FeeType.PCT

                cutoff_time = None
                delivery_sla = None
                funding_models = 'postfunded'
                execution_types = 'rfq,voice' if row['API']=='YES' else 'voice'
                api_types = 'rest,manual' if row['API'] == 'YES' else 'manual'
                wire_fee = 0.0
                wire_fee_unit = FeeType.USD

                bi = BrokerInstrument(
                    broker = corpay,
                    instrument = instrument,
                    base_ccy=base_ccy,
                    counter_ccy=counter_ccy,
                    active = True,
                    buy = can_buy,
                    sell = can_sell,
                    buy_wallet = buy_wallet,
                    sell_wallet = sell_wallet,
                    buy_cost = buy_cost,
                    buy_cost_unit = buy_cost_unit,
                    sell_cost = sell_cost,
                    sell_cost_unit = sell_cost_unit,
                    buy_fee = buy_fee,
                    buy_fee_unit = buy_fee_unit,
                    sell_fee = sell_fee,
                    sell_fee_unit = sell_fee_unit,
                    delivery_sla = delivery_sla,
                    cutoff_time = cutoff_time,
                    funding_models = funding_models,
                    execution_types = execution_types,
                    api_types = api_types,
                    wire_fee = wire_fee,
                    wire_fee_unit = wire_fee_unit,
                )
                instruments_to_add.append(bi)

    if instruments_to_add and not dry_run:
        BrokerInstrument.objects.bulk_create(instruments_to_add)

class Migration(migrations.Migration):
    dependencies = [
        ('broker', '0007_alter_brokerinstrument_cutoff_time_and_more'),
    ]

    operations = [
        migrations.RunPython(update_brokers),
    ]
