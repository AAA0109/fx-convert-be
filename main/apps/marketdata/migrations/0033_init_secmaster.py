# Generated by Django 4.2.10 on 2024-03-11 18:51

from django.db import migrations
from django.conf import settings

from main.apps.oems.backend.utils import load_yml, Expand
from main.apps.marketdata.models.ref.instrument import InstrumentTypes

import logging

logger = logging.getLogger(__name__)

"""
class InstrumentTypes(models.TextChoices):
    FXRATE = "fxrate", _("FxRate")
    FORWARD = "forward", _("Forward")
    FUTURE = 'future', _("Future")
    BASE_FUTURE = 'base_future', _("BaseFuture")
    CONTINUOUS_FUTURE = 'continuous_future', _("ContinuousFuture")
    CASH_EQUITY = 'cash_equity','CashEquity'
    OPTION = "option", _("Option")
    SPOT = "spot", _("Spot")
    WINDOW_FORWARD = "window_forward","Window Forward"
    NDF = "ndf", _("Ndf")
    SWAP = "swap", _("Swap")
    NDS = "nds", _("Nds")
    RTP = "rtp", _("Realtime Payment")
    CONTINUOUS_SPOT = 'continuous_spot', 'Continuous Spot'
"""

def update_sec_master(app, schema_editor):

    # ================

    path = Expand(__file__) + '/../../oems/cfgs/CCY_REFERENCE.yml'
    ref_data = load_yml(path)
    dry_run = False

    Instrument = app.get_model('marketdata', 'Instrument')
    for mkt, data in ref_data.items():

        instrument, created = Instrument.objects.get_or_create(name=mkt)

        symbology = data.pop('SYMBOLOGY')
        instrument.name = mkt
        instrument.instrument_type = InstrumentTypes.FXRATE
        instrument.tradable_instrument = False
        instrument.base_instrument = None
        instrument.reference = data
        instrument.symbology = symbology
        logger.debug(f"Creating {mkt}!")
        if not dry_run: instrument.save()

        # need to add swaps/nds as combos

        for tenor in ('RTP','SPOT','BROKEN','WINDOW'):

            mkt_nm = f'{mkt}-{tenor}'
            sub_instr, created = Instrument.objects.get_or_create(name=mkt_nm)
            sub_instr.name = mkt_nm
            sub_instr.tradable_instrument = True
            sub_instr.base_instrument = mkt

            if tenor == 'SPOT':
                sub_instr.instrument_type = InstrumentTypes.SPOT
            elif tenor == 'RTP':
                sub_instr.instrument_type = InstrumentTypes.RTP
            elif tenor == 'BROKEN':
                if data['CCY_TYPE'] == 'Spot':
                    sub_instr.instrument_type = InstrumentTypes.FORWARD
                elif data['CCY_TYPE'] == 'NDF':
                    sub_instr.instrument_type = InstrumentTypes.NDF
                else:
                    print( data['CCY_TYPE'] )
                    raise
            elif tenor == 'WINDOW':
                if data['CCY_TYPE'] == 'Spot':
                    sub_instr.instrument_type = InstrumentTypes.WINDOW_FORWARD
                else:
                    continue

            logger.debug(f"Creating {mkt_nm}!")
            if not dry_run: sub_instr.save()

        for tenor in data['TENORS']:

            if tenor == 'SPOT': continue

            mkt_nm = f'{mkt}-{tenor}'
            sub_instr, created = Instrument.objects.get_or_create(name=mkt_nm)
            sub_instr.name = mkt_nm
            sub_instr.tradable_instrument = True
            sub_instr.base_instrument = mkt

            if data['CCY_TYPE'] == 'Spot':
                sub_instr.instrument_type = InstrumentTypes.FORWARD
            elif data['CCY_TYPE'] == 'NDF':
                sub_instr.instrument_type = InstrumentTypes.NDF
            else:
                print( data['CCY_TYPE'] )
                raise

            logger.debug(f"Creating {mkt_nm}!")
            if not dry_run: sub_instr.save()

# ====================

class Migration(migrations.Migration):
    dependencies = [
        ('marketdata', '0032_instrument_base_instrument_and_more'),
    ]

    operations = [
        migrations.RunPython(update_sec_master),
    ]
