# Generated by Django 4.2.3 on 2023-12-16 16:55

from django.db import migrations

import logging

from django.db.models import Q

logger = logging.getLogger(__name__)


def create_corpay_market_convention(app, schema_editor):
    CurrencyDefinition = app.get_model('corpay', 'CurrencyDefinition')
    FxPair = app.get_model('currency', 'FxPair')
    FxMarketConvention = app.get_model('marketdata', 'FxMarketConvention')

    sell_definitions = CurrencyDefinition.objects.filter(
        fwd_delivery_selling=True,
        currency__mnemonic='USD'
    )
    buy_definitions = CurrencyDefinition.objects.filter(
        (Q(fwd_delivery_buying=True) | Q(ndf=True))
    )
    conventions = []
    added_pair_cache = {}
    for sell_definition in sell_definitions:
        for buy_definition in buy_definitions:
            if sell_definition.currency == buy_definition.currency:
                continue
            pair, created = FxPair.objects.get_or_create(
                base_currency=sell_definition.currency,
                quote_currency=buy_definition.currency
            )
            key = f"{pair.base_currency.mnemonic}/{pair.quote_currency.mnemonic}"
            reverse_pair, created = FxPair.objects.get_or_create(
                base_currency=buy_definition.currency,
                quote_currency=sell_definition.currency
            )
            if FxMarketConvention.objects.filter(
                    pair=pair
            ).exists():
                # If pair exists in FxMarketConvention continue
                continue
            if FxMarketConvention.objects.filter(
                    pair=reverse_pair
            ).exists():
                # If reverse pair exists in FxMarketConvention continue, this is to handle pairs like
                # EUR/USD, GBP/USD etc...
                continue

            if key not in added_pair_cache:
                logger.debug(f"creating FxMarketConvention for {key}")
                convention = FxMarketConvention(
                    pair=pair,
                    min_lot_size=1000,
                    is_supported=True
                )
                conventions.append(convention)
                added_pair_cache[key] = True

    FxMarketConvention.objects.bulk_create(conventions)


class Migration(migrations.Migration):
    dependencies = [
        ('marketdata', '0025_alter_corpayfxforward_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(create_corpay_market_convention)
    ]
