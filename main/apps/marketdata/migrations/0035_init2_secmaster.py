# Generated by Django 4.2.10 on 2024-03-11 18:51

from django.db import migrations
from django.conf import settings

from main.apps.oems.backend.utils import load_yml, Expand
from main.apps.marketdata.models.ref.instrument import InstrumentTypes

import logging

logger = logging.getLogger(__name__)

"""
class InstrumentTypes(models.TextChoices):
    FXRATE = "fxrate", _("FxRate")
    FORWARD = "forward", _("Forward")
    FUTURE = 'future', _("Future")
    BASE_FUTURE = 'base_future', _("BaseFuture")
    CONTINUOUS_FUTURE = 'continuous_future', _("ContinuousFuture")
    CASH_EQUITY = 'cash_equity','CashEquity'
    OPTION = "option", _("Option")
    SPOT = "spot", _("Spot")
    WINDOW_FORWARD = "window_forward","Window Forward"
    NDF = "ndf", _("Ndf")
    SWAP = "swap", _("Swap")
    NDS = "nds", _("Nds")
    RTP = "rtp", _("Realtime Payment")
    CONTINUOUS_SPOT = 'continuous_spot', 'Continuous Spot'
"""

def update_sec_master(app, schema_editor):

    # ================

    dry_run = False

    Instrument = app.get_model('marketdata', 'Instrument')
    Currency = app.get_model('currency', 'Currency')
    FxPair = app.get_model('currency', 'FxPair')

    base_currencies = Currency.objects.all()

    for base_currency in base_currencies:

        ccy = base_currency.mnemonic

        instrument, created = Instrument.objects.get_or_create(name=ccy)

        instrument.name = ccy
        instrument.instrument_type = InstrumentTypes.CURRENCY
        instrument.tradable_instrument = False
        instrument.base_instrument = None

        logger.debug(f"Creating {ccy}!")
        if not dry_run: instrument.save()


    """
    pairs_to_create = []
    for base_currency in base_currencies:
        if not FxPair.objects.filter(base_currency=base_currency, quote_currency=base_currency).exists():
            logger.debug(f"Pair missing {base_currency.mnemonic}/{base_currency.mnemonic}, creating new pair!")
            pair = FxPair(
                base_currency=base_currency,
                quote_currency=base_currency,
            )
            pairs_to_create.append(pair)

    if pairs_to_create and not dry_run:
        FxPair.objects.bulk_create(pairs_to_create)
    """

# ====================

class Migration(migrations.Migration):
    dependencies = [
        ('marketdata', '0034_instrument_multi_leg'),
    ]

    operations = [
        migrations.RunPython(update_sec_master),
    ]
