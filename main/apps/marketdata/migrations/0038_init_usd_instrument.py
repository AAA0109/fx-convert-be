# Generated by Django 4.2.10 on 2024-03-11 18:51
import copy

from django.db import migrations
from django.conf import settings

from main.apps.oems.backend.utils import load_yml, Expand
from main.apps.marketdata.models.ref.instrument import InstrumentTypes

import logging

logger = logging.getLogger(__name__)


def update_sec_master(app, schema_editor):

    # ================

    dry_run = False

    Instrument = app.get_model('marketdata', 'Instrument')

    model = Instrument.objects.get(name='EURUSD')

    row = {'BBG': {'FIGI': None, 'SYMBOL': 'EUR BGN Curncy', 'BBG_SRC': 'BGN', 'BBG_BASE': 'EUR', 'BBG_YELLOWKEY': 'Curncy', 'CALENDAR_CODES': ['TE', 'FD']}, 'IBKR': {'IB_CCY': 'USD', 'IB_DESC': 'European Monetary Union Euro', 'IB_EXCH': 'IDEALPRO', 'IB_MULT': None, 'IB_NAME': 'EUR.USD', 'IB_TYPE': 'CASH', 'IB_CONID': 12087792, 'IB_EXCHS': 'IDEALPRO', 'IB_LOCSYM': 'EUR.USD', 'IB_SYMBOL': 'EUR', 'IB_MINTICK': 5e-05, 'IB_PRICEMAG': 1, 'IB_TIMEZONE': 'EST5EDT'}, 'FINCAL': {'CEN_CODE': 'DCCY', 'ALT_CEN_CODE': None, 'EXEC_CEN_CODE': 'DCCY', 'HOL_CAL_CODES': ['NYB', 'Tgt'], 'WEEKEND_CEN_CODE': None}, 'REUTERS': {'SYMBOL': 'EUR=', 'REUTERS_BASE': 'EUR='}}

    for k, v in row.items():
        if k in ('BBG','IBKR','REUTERS'):
            for kk, vv in v.items():
                v[kk] = None

    usd_row = copy.deepcopy(row)
    eur_row = copy.deepcopy(row)

    usd_row['FINCAL']['HOL_CAL_CODES'] = ['NYB']
    eur_row['FINCAL']['HOL_CAL_CODES'] = ['Tgt']
    usd_row['BBG']['CALENDAR_CODES'] = ['FD']
    eur_row['BBG']['CALENDAR_CODES'] = ['TE']

    symbology = {
        'USDUSD': usd_row,
        'EUREUR': eur_row,
    }

    ref = copy.deepcopy( model.reference )

    ref['TERM_STRUCTURE_FIT'] = None
    for tenor in ref['TENORS']:
        ref['TENORS'][tenor] = False

    for mkt in ('USDUSD','EUREUR'):

        new_ref = copy.deepcopy(ref)

        new_ref['MARKET'] = mkt
        new_ref['DESCRIPTION'] = mkt[:3]
        new_ref['BASE_CCY'] = mkt[:3]
        new_ref['CNTR_CCY'] = mkt[:3]
        
        instrument, created = Instrument.objects.get_or_create(name=mkt)

        instrument.name = mkt
        instrument.instrument_type = InstrumentTypes.FXRATE
        instrument.tradable_instrument = False
        instrument.base_instrument = None
        instrument.reference = new_ref
        instrument.symbology = symbology[mkt]
        logger.debug(f"Creating {mkt}!")
        if not dry_run: instrument.save()

        # need to add swaps/nds as combos

        for tenor in ('RTP','SPOT'):

            mkt_nm = f'{mkt}-{tenor}'
            sub_instr, created = Instrument.objects.get_or_create(name=mkt_nm)
            sub_instr.name = mkt_nm
            sub_instr.tradable_instrument = True
            sub_instr.base_instrument = mkt

            if tenor == 'SPOT':
                sub_instr.instrument_type = InstrumentTypes.SPOT
            elif tenor == 'RTP':
                sub_instr.instrument_type = InstrumentTypes.RTP

            logger.debug(f"Creating {mkt_nm}!")
            if not dry_run: sub_instr.save()

# ====================

class Migration(migrations.Migration):
    dependencies = [
        ('marketdata', '0037_fxforward_delivery_days_fxforward_expiry_days_and_more'),
    ]

    operations = [
        migrations.RunPython(update_sec_master),
    ]
