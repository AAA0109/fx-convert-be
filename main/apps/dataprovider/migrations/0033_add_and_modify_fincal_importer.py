# Generated by Django 4.2.11 on 2024-04-16 12:43

from django.db import migrations
from django.apps.registry import Apps
from main.apps.dataprovider.models import DataProvider as Prov
from main.apps.dataprovider.models import Source as Src
from main.apps.dataprovider.models import Profile as Prf


def add_and_modify_fincal_importer_profiles(apps: Apps, reverse:bool = False):
    DataProvider = apps.get_model('dataprovider', 'DataProvider')
    Source = apps.get_model('dataprovider', 'Source')
    Profile = apps.get_model('dataprovider', 'Profile')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    TradingHolidaysCode = apps.get_model('marketdata', 'TradingHolidaysCodeFincal')
    TradingHolidaysInfo = apps.get_model('marketdata', 'TradingHolidaysInfoFincal')
    TradingHolidays = apps.get_model('marketdata', 'TradingHolidaysFincal')
    TradingCalendar = apps.get_model('marketdata', 'TradingCalendarFincal')

    ct_trading_holidays_code = ContentType.objects.get_for_model(TradingHolidaysCode)
    ct_trading_holidays_info = ContentType.objects.get_for_model(TradingHolidaysInfo)
    ct_trading_holidays = ContentType.objects.get_for_model(TradingHolidays)
    ct_trading_calendar = ContentType.objects.get_for_model(TradingCalendar)

    profiles = [
        {
            'name': 'Trading Holidays Code',
            'filename': 'CODES_.*',
            'directory': 'trading_holidays/fincal/code',
            'gcp_directory': 'fincal/tradingholidays',
            'target': ct_trading_holidays_code
        },
        {
            'name': 'Trading Holidays Info',
            'filename': 'INFO_.*',
            'directory': 'trading_holidays/fincal/info',
            'gcp_directory': 'fincal/tradingholidays',
            'target': ct_trading_holidays_info
        },
        {
            'name': 'Trading Holidays',
            'filename': 'CATHOL_.*',
            'directory': 'trading_holidays/fincal/data',
            'gcp_directory': 'fincal/tradingholidays',
            'target': ct_trading_holidays
        },
         {
            'name': 'Trading Calendar',
            'filename': 'TH_DUMP_HIST_.*',
            'directory': 'trading_calendar/fincal/data',
            'gcp_directory': 'fincal/tradingcalendar',
            'target': ct_trading_calendar
        }
    ]

    new_profiles = [
        {
            'name': 'Trading Holidays',
            'filename': 'PANGEA_.*',
            'directory': 'fincal/tradingholidays',
            'file_format': Prf.FileFormat.ZIP
        },
        {
            'name': 'Trading Calendar',
            'filename': 'PANGTH_.*',
            'directory': 'fincal/tradingcalendar',
            'file_format': Prf.FileFormat.TAR_GZ
        }
    ]

    fincal_dataprovider, created = DataProvider.objects.get_or_create(
        provider_handler=Prov.ProviderHandlers.FIN_CAL,
        name="Fin Cal"
    )

    fincal_sftp_source, created = Source.objects.get_or_create(
        data_type=Src.DataType.SFTP,
        data_provider=fincal_dataprovider,
        name='Fin Cal SFTP'
    )

    fincal_gcp_source, created = Source.objects.get_or_create(
        data_type=Src.DataType.GCP,
        data_provider=fincal_dataprovider,
        name='Fin Cal GCP'
    )

    if not reverse:
        fincal_sftp_source.sftp_dir = '/'
        fincal_sftp_source.save()

        # remove previously created fincal sftp importer profiles
        for i in range(len(profiles)):
            name = f"{profiles[i]['name']} SFTP"
            filename = profiles[i]['filename']
            directory = profiles[i]['directory']

            try:
                profile = Profile.objects.get(
                    name=name,
                    source=fincal_sftp_source,
                    filename=filename,
                    directory=directory,
                    file_format=Prf.FileFormat.CSV,
                    target=profiles[i]['target']
                )
                profile.delete()
            except Exception as e:
                pass

        # add archive files importer profile
        for new_profile in new_profiles:
            try:
                profile, created = Profile.objects.get_or_create(
                    name=new_profile['name'],
                    source=fincal_sftp_source,
                    filename=new_profile['filename'],
                    directory=new_profile['directory'],
                    file_format=new_profile['file_format'],
                    target=None
                )
            except Exception as e:
                pass

        for item in profiles:
            try:
                profile = Profile.objects.get(
                    name=item['name'].replace('Holidays', 'Holiday'),
                    source=fincal_gcp_source,
                    directory=item['gcp_directory'],
                    file_format=Prf.FileFormat.CSV,
                    target=item['target']
                )
                filename = item['filename']
                if item['target'] == ct_trading_calendar:
                    filename = 'PANGTH_.*'
                elif item['target'] == ct_trading_holidays:
                    filename = 'PANGEA_.*'
                profile.filename = filename
                profile.save()
            except Exception as e:
                pass

    elif reverse:
        fincal_sftp_source.sftp_dir = ''
        fincal_sftp_source.save()

        for i in range(len(profiles)):
            name = f"{profiles[i]['name']} SFTP"
            filename = profiles[i]['filename']
            directory = profiles[i]['directory']

            try:
                profile, created = Profile.objects.get_or_create(
                    name=name,
                    source=fincal_sftp_source,
                    filename=filename,
                    directory=directory,
                    file_format=Prf.FileFormat.CSV,
                    target=profiles[i]['target']
                )
            except Exception as e:
                pass

        for new_profile in new_profiles:
            try:
                profile = Profile.objects.get(
                    name=new_profile['name'],
                    source=fincal_sftp_source,
                    filename=new_profile['filename'],
                    directory=new_profile['directory'],
                    file_format=new_profile['file_format'],
                    target=None
                )
                profile.delete()
            except Exception as e:
                pass

        for item in profiles:
            try:
                profile = Profile.objects.get(
                    name=item['name'].replace('Holidays', 'Holiday'),
                    source=fincal_gcp_source,
                    directory=item['gcp_directory'],
                    file_format=Prf.FileFormat.CSV,
                    target=item['target']
                )
                filename = item['filename'].replace('_.*', '')
                profile.filename = filename
                profile.save()
            except Exception as e:
                pass


def forward_migration(apps: Apps, schema_editor):
    add_and_modify_fincal_importer_profiles(apps=apps)

def reverse_migration(apps: Apps, schema_editor):
    add_and_modify_fincal_importer_profiles(apps=apps, reverse=True)

class Migration(migrations.Migration):

    dependencies = [
        ('dataprovider', '0032_profile_extract_for_profile_ids_and_more'),
    ]

    operations = [
        migrations.RunPython(forward_migration, reverse_migration)
    ]
