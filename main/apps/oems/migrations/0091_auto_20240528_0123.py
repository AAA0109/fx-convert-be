# Generated by Django 4.2.11 on 2024-05-13 17:02
import csv
import logging

from django.db import migrations
from django.core.paginator import Paginator
from main.apps.currency.models import FxPair
from main.apps.oems.models.cny import CnyExecution
from main.apps.account.models.company import Company

# ====

logger = logging.getLogger(__name__)

# ====

MAJORS = {'USD','EUR','GBP','CAD','MXN','AUD'}

def update_cny_execute(app, schema_editor):

    dry_run = False

    if not dry_run:
        for _ in CnyExecution.objects.iterator():
            mkt = _.fxpair.market
            ccy1, ccy2 = mkt[:3], mkt[3:]
            if ccy1 not in MAJORS and ccy2 not in MAJORS:
                logger.info(f'delete {mkt} for {_.company.name}')
                _.delete()

        """
        CnyExecution.objects.filter(
            fxpair__base_currency__mnemonic__nin=MAJORS,
            fxpair__quote_currency__mnemonic__nin=MAJORS,
        ).delete()
        """

    for company in Company.objects.iterator():

        for mkt in ('USDUSD','EUREUR'):

            fxpair = FxPair.get_pair(mkt)
            try:
                cny = CnyExecution.objects.get(company=company.id, fxpair=fxpair.id)
                if not cny: raise
            except:
                cny = None

            if cny is None:

                logger.info(f'create {mkt} for {company.name}')
                from_ccy, to_ccy = mkt[:3], mkt[3:]

                spot_broker = 'CORPAY'
                fwd_broker = 'CORPAY'

                min_order_size_to = 1.0
                max_order_size_to = 5000000.0

                min_order_size_from = 1.0
                max_order_size_from = 5000000.0

                spot_rfq_type = CnyExecution.RfqTypes.API

                if not dry_run:
                    CnyExecution.objects.create(
                        company=company,
                        fxpair=fxpair,
                        default_broker=spot_broker,
                        spot_broker=spot_broker,
                        fwd_broker=fwd_broker,
                        spot_rfq_type = spot_rfq_type,
                        min_order_size_to = min_order_size_to,
                        max_order_size_to = max_order_size_to,
                        min_order_size_from = min_order_size_from,
                        max_order_size_from = max_order_size_from,
                    )


class Migration(migrations.Migration):
    dependencies = [
        ('oems', '0090_alter_cnyexecution_spot_broker'),
    ]

    operations = [
        migrations.RunPython(update_cny_execute),
    ]
