# Generated by Django 4.2.11 on 2024-05-13 17:02
import csv
import logging

from django.db import migrations
from django.core.paginator import Paginator

from main.apps.oems.backend.utils import load_yml, Expand
from main.apps.currency.models.fxpair import FxPair
from main.apps.oems.models.cny import CnyExecution

# ====

logger = logging.getLogger(__name__)

# ====

def update_cny_execute(app, schema_editor):
    # CnyExecution = app.get_model('oems', 'CnyExecution')

    path = Expand(__file__) + '/ccy_minimums.csv'
    ccy_map = {}

    with open( path ) as f:
        reader = csv.DictReader(f, delimiter=',')
        for row in reader:
            row['min'] = float(row['min'])
            row['max'] = float(row['max'])
            ccy_map[ row['ccy'] ] = row

    # Retrieve your model's queryset
    queryset = CnyExecution.objects.all().order_by('id').select_related('company','fxpair')

    cny_to_update = []

    # Create a Paginator object, with say 10 items per page
    paginator = Paginator(queryset, 1000)

    for page_number in paginator.page_range:
        page = paginator.page(page_number)
        for _ in page:
            to_ccy, from_ccy = _.fxpair.market[:3], _.fxpair.market[3:]
            update = False

            # print('checking', fxpair)
            if to_ccy in ccy_map:
                _.min_order_size_to = ccy_map[to_ccy]['min']
                _.max_order_size_to = ccy_map[to_ccy]['max']
                update = True

            if from_ccy in ccy_map:
                _.min_order_size_from = ccy_map[from_ccy]['min']
                _.max_order_size_from = ccy_map[from_ccy]['max']
                update = True

            if update:
                cny_to_update.append(_)

        if cny_to_update:
            print('updating', len(cny_to_update), 'items')
            CnyExecution.objects.bulk_update(cny_to_update, ['min_order_size_from','max_order_size_from','min_order_size_to','max_order_size_to'])
            cny_to_update.clear()

class Migration(migrations.Migration):
    dependencies = [
        ('oems', '0083_ticket_delivery_fee_ticket_delivery_fee_unit'),
    ]

    operations = [
        migrations.RunPython(update_cny_execute),
    ]
