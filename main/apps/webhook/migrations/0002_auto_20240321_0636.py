# Generated by Django 4.2.10 on 2024-03-21 06:36

from django.db import migrations, IntegrityError


def create_webhook_events(apps, schema_editor):
    Event = apps.get_model('webhook', 'Event')
    webhook_events = [
        {'name': 'Ticket Created', 'type': 'ticket.created'},
        {'name': 'Ticket Updated', 'type': 'ticket.updated'},
        {'name': 'Ticket Canceled', 'type': 'ticket.canceled'},
        {'name': 'Trade Confirm', 'type': 'trade.confirm'},
        {'name': 'Trade MTM', 'type': 'trade.mtm'},
        {'name': 'Trade Fixing', 'type': 'trade.fixing'},
        {'name': 'Trade Settlement', 'type': 'trade.settlement'},
        {'name': 'Margin Notice', 'type': 'margin.notice'}
    ]
    for event in webhook_events:
        try:
            Event.objects.create(**event)
        except IntegrityError:
            continue

def create_webhook_event_groups(apps, schema_editor):
    EventGroup = apps.get_model('webhook', 'EventGroup')
    Event = apps.get_model('webhook', 'Event')
    groups = [
        {
            'name': 'All',
            'events': [
                Event.objects.get(type='ticket.created'),
                Event.objects.get(type='ticket.updated'),
                Event.objects.get(type='ticket.canceled'),
                Event.objects.get(type='trade.confirm'),
                Event.objects.get(type='trade.mtm'),
                Event.objects.get(type='trade.fixing'),
                Event.objects.get(type='trade.settlement'),
                Event.objects.get(type='trade.mtm'),
                Event.objects.get(type='trade.fixing'),
                Event.objects.get(type='margin.notice'),
            ]
        },
        {
            'name': 'Trade',
            'events': [
                Event.objects.get(type='ticket.created'),
                Event.objects.get(type='ticket.updated'),
                Event.objects.get(type='ticket.canceled'),
            ]
        },
        {
            'name': 'Drop Copy',
            'events': [
                Event.objects.get(type='trade.confirm'),
                Event.objects.get(type='trade.mtm'),
                Event.objects.get(type='trade.fixing'),
                Event.objects.get(type='trade.settlement'),
            ]
        },
        {
            'name': 'Urgent',
            'events': [
                Event.objects.get(type='margin.notice'),
            ]
        }
    ]
    for group in groups:
        group_obj = EventGroup.objects.create(name=group['name'])
        for event in group['events']:
            group_obj.events.add(event)

class Migration(migrations.Migration):

    dependencies = [
        ('webhook', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_webhook_events),
        migrations.RunPython(create_webhook_event_groups),
    ]
